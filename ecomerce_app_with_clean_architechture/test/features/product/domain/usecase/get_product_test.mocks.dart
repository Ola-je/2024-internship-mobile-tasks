// Mocks generated by Mockito 5.4.4 from annotations
// in task_6/test/features/product/domain/usecase/get_product_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_6/core/failure/failure.dart' as _i5;
import 'package:task_6/features/product/domain/entities/products.dart' as _i6;
import 'package:task_6/features/product/domain/repositories/product_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i3.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Products>> CreateProduct(
          _i6.Products? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #CreateProduct,
          [product],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Products>>.value(
            _FakeEither_0<_i5.Failure, _i6.Products>(
          this,
          Invocation.method(
            #CreateProduct,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Products>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> DeleteProduct(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #DeleteProduct,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #DeleteProduct,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Products>> UpdateProduct(
          _i6.Products? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #UpdateProduct,
          [product],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Products>>.value(
            _FakeEither_0<_i5.Failure, _i6.Products>(
          this,
          Invocation.method(
            #UpdateProduct,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Products>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Products>> GetProduct(
          _i6.Products? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #GetProduct,
          [product],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Products>>.value(
            _FakeEither_0<_i5.Failure, _i6.Products>(
          this,
          Invocation.method(
            #GetProduct,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Products>>);
}
